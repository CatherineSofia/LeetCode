#!/usr/bin/python
# ==============================================================================
# Author:   Tao Li (taoli@ucsd.edu)
# Date:     Jun 3, 2015
# Question: 221-Maximal-Square
# Link:     https://leetcode.com/problems/maximal-square/
# ==============================================================================
# Given a 2D binary matrix filled with 0's and 1's, find the largest square containing all 1's and return its area.
# 
# For example, given the following matrix:
# 
# 1 0 1 0 0
# 1 0 1 1 1
# 1 1 1 1 1
# 1 0 0 1 0
# 
# Return 4.
# ==============================================================================
# Method: Naive Method
# Time Complexity: O(n^2)
# Space Complexity: O(1)
# ==============================================================================

class Solution:
    # @param {character[][]} matrix
    # @return {integer}
    def maximalSquare(self, matrix):
        if not matrix or not matrix[0]:
            return 0
        
        m, n = len(matrix), len(matrix[0])
        i = j = 0
        maxVal = 0

        while i < m and j < n:
            k = 0
            while i+k<m and j+k<n and '0' not in matrix[i+k][j:j+k+1] and '0' not in [matrix[l][j+k] for l in xrange(i,i+k+1)]:
                k += 1
                
            maxVal = max(maxVal, k)
            i += (j+1) >= n
            j = (j+1)%n

        return maxVal**2

if __name__ == '__main__':
    # matrix = [['0','0','1'], ['1','0','1'], ['1','1','1']]
    # matrix = [['0']]
    # matrix = ["1"]
    # matrix = ["000","000","111"]
    # matrix = ["00", "01"]
    # matrix = ["11", "11"]
    # matrix = ["1010","1011","1011","1111"]
    matrix = ["11111111","11111110","11111110","11111000","01111000"]
    # matrix
    print "\n".join(matrix)
    print Solution().maximalSquare(matrix)